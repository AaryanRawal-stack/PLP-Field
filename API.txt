
API Integration Overview for Instagram Follower Exporter
--------------------------------------------------------

This document provides a comprehensive overview of how API integration is implemented in our Chrome extension for Instagram follower extraction. The primary goal of the integration is to fetch additional details – specifically, the privacy status of Instagram accounts – and enhance the basic extraction of follower usernames.

1. Overview of API Integration
   - The integration is handled within the helper function "fetchUserPrivacyStatus" in the extractionUtils.js module.
   - This function is responsible for determining whether a given Instagram username corresponds to a private or public account.

2. API Endpoints Used
   a. Public API Endpoint:
      - URL Format: https://www.instagram.com/<username>/?__a=1&__d=1
      - Purpose: This endpoint is designed to provide basic user information in JSON format.
      - Special Consideration: Instagram employs anti-scraping measures that cause this endpoint to return a response with an unwanted prefix (typically “for (;;);”). This prefix is removed from the response text before parsing it as JSON.
   
   b. Internal API Endpoint:
      - URL Format: https://i.instagram.com/api/v1/users/web_profile_info/?username=<username>
      - Purpose: Used as a fallback if the public API call fails. This endpoint is part of Instagram’s internal API and may provide more reliable data under certain conditions.
      - Requirements: An additional header (“X-IG-App-ID”) is included to simulate a valid request. The provided App ID is an example and might need adjustment based on current requirements.
   
3. Implementation Details
   - The "fetchUserPrivacyStatus" function initiates a fetch request to the public API endpoint first.
   - If the public request is successful:
       * The response is retrieved as text.
       * A regular expression is applied to remove the anti-scraping prefix.
       * The cleaned text is then parsed into JSON.
       * The privacy status is extracted from the JSON object, typically found at data.graphql.user.is_private.
       * If a boolean value is obtained (true for private, false for public), it is resolved.
   - If the public API call fails (due to non-OK HTTP status, parsing issues, or missing data):
       * The function falls back to the internal API endpoint.
       * The internal API call is made with appropriate headers.
       * The response is processed as JSON, and the privacy status is extracted from data.data.user.is_private.
       * If successful, the boolean privacy status is resolved.
   - If both API calls fail:
       * The function resolves with the string "not found" to indicate that the privacy status could not be determined.

4. Usage in the Extraction Flow
   - Within the "extractFollowers" function:
       * Each extracted username is validated using a regular expression to ensure it is a legitimate Instagram username.
       * For each valid username, an object is created with an initial "isPrivate" property set to null.
       * The "fetchUserPrivacyStatus" function is then called asynchronously to update the "isPrivate" property of the user object.
       * Enhanced follower objects are accumulated in a Map and later passed on to the rest of the extraction workflow.
   - The enhanced data (username and privacy status) is then used by other parts of the extension (e.g., CSV export and UI updates).

5. Limitations and Challenges
   - **Anti-Scraping Measures:**  
     Instagram deliberately modifies responses (e.g., by adding a prefix) to deter automated data extraction. The current implementation includes a workaround to strip this prefix, but further changes in Instagram’s policies may require updates.
   - **CORS Restrictions:**  
     Testing these API calls directly in a browser console might result in CORS errors. In a deployed Chrome extension, the manifest must include appropriate permissions to allow these requests.
   - **Rate Limiting:**  
     Instagram may enforce rate limits on API requests. Although the extraction cycle includes delays to mitigate this, excessive requests could still lead to temporary blocks.
   - **Data Accuracy:**  
     The endpoints used may not always return consistent or complete data due to changes in Instagram’s API or account-specific restrictions.
   - **Fallback Reliability:**  
     The fallback to the internal API provides a second chance to retrieve data; however, it may also fail or require modifications (e.g., updated App IDs or headers) in the future.
   - **Production Considerations:**  
     In a production environment, additional error handling, logging, and possibly retry logic should be implemented to ensure robust operation. The current integration serves as a functional starting point but may need enhancements based on real-world usage and API changes.

6. Future Enhancements
   - Improve error handling and add retries for transient errors.
   - Monitor Instagram API changes and adjust the endpoints or headers as necessary.
   - Consider implementing caching or back-off strategies to further mitigate rate limiting.
   - Explore additional API endpoints or methods for gathering more comprehensive user data.

This comprehensive overview should provide a clear understanding of how the API integration is currently implemented in the extension, the challenges encountered, and areas for future improvement.
